


-- CREATE DATABASE tution;
-- USE tution;


-- CREATE TABLE sdetails (
--     Student CHAR(1) PRIMARY KEY,
--     Class VARCHAR(20)
-- );


-- INSERT INTO sdetails (Student, Class) VALUES
-- ('A', 'Math'),
-- ('B', 'English'),
-- ('C', 'Math'),
-- ('D', 'Biology'),
-- ('E', 'Math'),
-- ('F', 'Computer'),
-- ('G', 'Math'),
-- ('H', 'Math'),
-- ('I', 'Math');


-- SELECT Class
-- FROM sdetails
-- GROUP BY Class
-- HAVING COUNT(Class) >= 4;



-- CREATE DATABASE office;
-- USE office;


-- CREATE TABLE details (
--     id INT PRIMARY KEY,
--     name VARCHAR(20),
--     salary INT,
--     managerId INT
-- );


-- INSERT INTO details (id, name, salary, managerId)
-- VALUES
--     (1, 'joe', 70000, 3),
--     (2, 'Henry', 80000, 4),
--     (3, 'Sam', 60000, NULL),
--     (4, 'Max', 90000, NULL);


-- SELECT * FROM details e1
-- JOIN details e2 ON e1.managerId = e2.id
-- WHERE e1.salary > e2.salary;



-- CREATE DATABASE abc;
-- USE abc;

-- CREATE TABLE employee (
--     id INT,
--     name VARCHAR(20)
-- );
-- INSERT INTO employee (id, name)
-- VALUES
--     (1, 'Alice'),
--     (7, 'Bob'),
--     (11, 'Meir'),
--     (90, 'Winston'),
--     (3, 'Jonthan');
--    
-- CREATE TABLE uni (
--     id INT,
--     unique_id INT
-- );
-- INSERT INTO uni (id, unique_id)
-- VALUES
--     (3, 1),
--     (11, 2),
--     (90, 3);
-- SELECT e.name,u.unique_id FROM employee e
-- LEFT JOIN uni u ON e.id = u.id;


---------------------------------------------------------------------------------------------
Create database abcd;
use abcd;

create table employee(
id int primary key,
dept varchar(20),
salary int
);


INSERT INTO employee
(id,dept,salary)
VALUES
(101,"hr",78),
(102,"it",93),
(103,"management", 84),
(104,"it",9),
(105,"hr",110);

INSERT INTO employee
(id,dept,salary)
VALUES
(106,"DSA",178),
(107,"DSA",293),
(108,"DSA", 184);

select id,dept,salary,
avg(salary) over(),
max(salary) over(partition by dept) from employee;


select id,dept,salary,
sum(salary) over(),
sum(salary) over(partition by dept) from employee;

select id,dept,salary,
sum(salary) over(),
sum(salary) over(order by salary) from employee;

select id,dept,salary,
sum(salary) over(order by salary),
sum(salary) over(partition by dept order by salary)
 from employee;
 
 
--  rank dense_rank()

 select id,dept,salary,
 rank() over(order by salary) from employee;
 
  select id,dept,salary,
   rank() over(order by salary),
  dense_rank() over(order by salary) from employee;
 
select id,dept,salary,
rank() over(partition by dept order by salary)
 from employee;
 
 -- using the windows function find out nth highest salary from data
 -- what is use of N tile

select id,dept,salary,
rank() over ( order by salary desc)
from employee;


SELECT id, dept, salary
FROM (
    SELECT id, dept, salary,
           DENSE_RANK() OVER (ORDER BY salary DESC) 
           AS rank
    FROM employee
) AS ranked_salaries
WHERE rank = 3;


--------------------------------------------------------------------------------
-- create database past;
-- use past;

-- create table games(
-- yr int,
-- city varchar(9)
-- );

-- insert into games
-- (yr,city)
-- values
-- (2000,"Sydney"),
-- (2004,"Athens"),
-- (2008,"Beijing"), 
-- (2012,"London"),
-- (2016,"Rio");

-- SELECT yr, city FROM games;

--  drop DATABASE raju

 create database RTU;
 use RTU;

create table Student(
STUDENT_ID int primary key,
FIRST_NAME varchar(20),
LAST_NAME varchar(20),
GPA float,
ENROLLMENT_DATE DATETIME,
MAJOR varchar(20)
);

insert into Student
(STUDENT_ID,FIRST_NAME,LAST_NAME,GPA,ENROLLMENT_DATE,MAJOR)
values
(201,"Shivansh","Mahajan",8.79,'2021-09-01 09:30:00',"Computer Science"),
(202,"Umesh","Sharma",8.44,'2021-09-01 08:30:00',"Mathematics"),
(203,"Rakesh","Kumar",5.60,'2021-09-01 10:00:00',"Biology"),
(204,"Radha","Sharma",9.20,'2021-09-01 12:45:00',"Chemistry"),
(205,"Kush","Kumar",7.85,'2021-09-01 08:30:00',"Physics"),
(206,"Prem","Chopra",9.56,'2021-09-01 09:24:00',"History"),
(207,"Pankaj","Vats",9.78,'2021-09-01 02:30:00',"English"),
(208,"Navleen","Kaur",7.00,'2021-09-01 06:30:00',"Mathematics");

create table Program(
STUDENT_REF_ID int primary key,
PROGRAM_NAME varchar(20),
PROGRAM_START_DATE datetime
);

insert into Program
(STUDENT_REF_ID,PROGRAM_NAME,PROGRAM_START_DATE)
values
(201,"Computer Science",'2021-09-01 00:00:00'),
(202,"Mathematics",'2021-09-01 00:00:00'),
(208,"Mathematics",'2021-09-01 00:00:00'),
(205,"Physics",'2021-09-01 00:00:00'),
(204,"Chemistry",'2021-09-01 00:00:00'),
(207,"Psychology",'2021-09-01 00:00:00'),
(206,"History",'2021-09-01 00:00:00'),
(203,"Biology",'2021-09-01 00:00:00');

create table Scholarship(
STUDENT_REF_ID int,
SCHOLARSHIP_AMOUNT int,
SCHOLARSHIP_DATE datetime
);

insert into Scholarship
(STUDENT_REF_ID,SCHOLARSHIP_AMOUNT,SCHOLARSHIP_DATE)
values
(201,5000,'2021-10-15 00:00:00'),
(202,4500,'2022-08-18 00:00:00'),
(203,3000,'2022-01-25 00:00:00'),
(201,4000,'2021-10-15 00:00:00');

-- select upper(FIRST_NAME) as STUDENT_NAME from Student;
-- select distinct MAJOR from Student;
-- select MAJOR from Student GROUP BY(major);
-- select substring(FIRST_NAME,1,3) from student
-- select instr(first_name, "a") from Student WHERE first_name = 'Shivansh';  

-- select distinct major,length(major) from student;
-- select major,length(major) from student group by(major);

-- select replace(first_name,'a',"A") from student

-- select concat(first_name,' ',last_name) as complete_name from Student;
-- select * from student order by first_name,major desc;
-- select * from student where first_name in ('Prem','Shivansh');
-- select * from student where first_name not in ('prem','shivansh');
-- select * from student where first_name like '%a';
-- select * from student where first_name like '_____a';
-- select * from student where gpa between 9.00 and 9.78
-- select major,count(*) as  TOTAL_COUNT FROM student where major = 'computer science';
-- select concat(first_name,' ',last_name) as full_name from student where gpa between 8.5 and 9.5
-- select major,count(major) from student group by major order by count(major);

-- select student.first_name,student.last_name,scholarship.scholarship_amount, scholarship.scholarship_date from student
-- inner join
-- scholarship on student.student_id = scholarship.student_ref_id;

-- select * from student where student_id % 2 != 0; 
-- select * from student where student_id % 2 = 0;


CREATE DATABASE geeks;

USE geeks;

CREATE TABLE professor(
    ID int,
    Name varchar(20),
    Salary int
);

CREATE TABLE teaches(
    course_id int,
    prof_id int,
    course_name varchar(20)
);

INSERT INTO professor VALUES (1, 'Rohan', 57000);
INSERT INTO professor VALUES (2, 'Aryan', 45000);
INSERT INTO professor VALUES (3, 'Arpit', 60000);
INSERT INTO professor VALUES (4, 'Harsh', 50000);
INSERT INTO professor VALUES (5, 'Tara', 55000);

INSERT INTO teaches VALUES (1, 1, 'English');
INSERT INTO teaches VALUES (1, 3, 'Physics');
INSERT INTO teaches VALUES (2, 4, 'Chemistry');
INSERT INTO teaches VALUES (2, 5, 'Mathematics');
